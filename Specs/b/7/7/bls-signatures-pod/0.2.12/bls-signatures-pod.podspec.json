{
  "name": "bls-signatures-pod",
  "version": "0.2.12",
  "summary": "BLS signatures in C++, using the relic toolkit",
  "description": "Implements BLS signatures with aggregation as in Boneh, Drijvers, Neven 2018, using relic toolkit for cryptographic primitives (pairings, EC, hashing). The BLS12-381 curve is used.",
  "homepage": "https://bitbucket.devops.nonprod.empf.local/scm/react/bls-signatures",
  "license": {
    "type": "Apache License 2.0"
  },
  "authors": {
    "Chia Network": "hello@chia.net"
  },
  "social_media_url": "https://twitter.com/ChiaNetworkInc",
  "source": {
    "git": "https://bitbucket.devops.nonprod.empf.local/scm/react/bls-signatures.git",
    "commit": "f114ffeff4653e5522d1b3e28687fa9f384a557f",
    "submodules": false
  },
  "prepare_command": "#!/bin/sh\n\nset -x\n\ngit submodule update --init\n\nMIN_IOS=\"13.0\"\nMIN_WATCHOS=\"5.0\"\nMIN_TVOS=$MIN_IOS\nMIN_MACOS=\"10.15\"\n\nIPHONEOS=iphoneos\nIPHONESIMULATOR=iphonesimulator\nWATCHOS=watchos\nWATCHSIMULATOR=watchsimulator\nTVOS=appletvos\nTVSIMULATOR=appletvsimulator\nMACOS=macosx\n\nLOGICALCPU_MAX=`sysctl -n hw.logicalcpu_max`\n\nGMP_DIR=\"`pwd`/gmp\"\n\nversion_min_flag()\n{\n    PLATFORM=$1\n\n    FLAG=\"\"\n    if [[ $PLATFORM = $IPHONEOS ]]; then\n        FLAG=\"-miphoneos-version-min=${MIN_IOS}\"\n    elif [[ $PLATFORM = $IPHONESIMULATOR ]]; then\n        FLAG=\"-mios-simulator-version-min=${MIN_IOS}\"\n    elif [[ $PLATFORM = $WATCHOS ]]; then\n        FLAG=\"-mwatchos-version-min=${MIN_WATCHOS}\"\n    elif [[ $PLATFORM = $WATCHSIMULATOR ]]; then\n        FLAG=\"-mwatchos-simulator-version-min=${MIN_WATCHOS}\"\n    elif [[ $PLATFORM = $TVOS ]]; then\n        FLAG=\"-mtvos-version-min=${MIN_TVOS}\"\n    elif [[ $PLATFORM = $TVSIMULATOR ]]; then\n        FLAG=\"-mtvos-simulator-version-min=${MIN_TVOS}\"\n    elif [[ $PLATFORM = $MACOS ]]; then\n        FLAG=\"-mmacosx-version-min=${MIN_MACOS}\"\n    fi\n\n    echo $FLAG\n}\n\n\nprepare()\n{\n    download_gmp()\n    {\n        GMP_VERSION=\"6.2.1\"\n        CURRENT_DIR=`pwd`\n\n        if [ ! -s ${CURRENT_DIR}/gmp-${GMP_VERSION}.tar.bz2 ]; then\n            curl -L -o ${CURRENT_DIR}/gmp-${GMP_VERSION}.tar.bz2 https://gmplib.org/download/gmp/gmp-${GMP_VERSION}.tar.bz2\n        fi\n\n        rm -rf gmp\n        tar xfj \"gmp-${GMP_VERSION}.tar.bz2\"\n        mv gmp-${GMP_VERSION} gmp\n        GMP_DIR=\"`pwd`/gmp\"\n    }\n\n    download_cmake_toolchain()\n    {\n        pushd contrib/relic\n\n        if [ ! -s ios.toolchain.cmake ]; then\n                SHA256_HASH=\"4fe55ef74f4e28ade4b2591b8cc61a73c8e1a6508a9108052fe40098e63d8e79\"\n                curl -o ios.toolchain.cmake https://raw.githubusercontent.com/leetal/ios-cmake/master/ios.toolchain.cmake\n                DOWNLOADED_HASH=`shasum -a 256 ios.toolchain.cmake | cut -f 1 -d \" \"`\n                if [ $SHA256_HASH != $DOWNLOADED_HASH ]; then\n                  echo \"Error: sha256 checksum of ios.toolchain.cmake mismatch\" >&2\n                  exit 1\n                fi\n            fi\n\n        popd # contrib/relic\n    }\n\n    download_gmp\n    download_cmake_toolchain\n\n    rm -rf artefacts\n    mkdir artefacts\n}\n\nbuild_gmp_arch()\n{\n    pushd gmp\n\n    PLATFORM=$1\n    ARCH=$2\n\n    SDK=`xcrun --sdk $PLATFORM --show-sdk-path`\n    PLATFORM_PATH=`xcrun --sdk $PLATFORM --show-sdk-platform-path`\n    CLANG=`xcrun --sdk $PLATFORM --find clang`\n    CURRENT_DIR=`pwd`\n    DEVELOPER=`xcode-select --print-path`\n    export PATH=\"${PLATFORM_PATH}/Developer/usr/bin:${DEVELOPER}/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin\"\n\n    make clean || true\n    make distclean || true\n\n    mkdir gmplib-${PLATFORM}-${ARCH}\n\n    CFLAGS=\"-fembed-bitcode -arch ${ARCH} --sysroot=${SDK}\"\n    EXTRA_FLAGS=\"$(version_min_flag $PLATFORM)\"\n\n    CCARGS=\"${CLANG} ${CFLAGS}\"\n    CPPFLAGSARGS=\"${CFLAGS} ${EXTRA_FLAGS}\"\n\n    CONFIGURESCRIPT=\"gmp_configure_script.sh\"\n\n    cat >\"$CONFIGURESCRIPT\" << EOF\n#!/bin/sh\n\n./configure CC=\"$CCARGS\" CPPFLAGS=\"$CPPFLAGSARGS\" --disable-shared --enable-static --host=arm-apple-darwin --disable-assembly --prefix=\"${CURRENT_DIR}/gmplib-${PLATFORM}-${ARCH}\"\n\nEOF\n\n    chmod a+x \"$CONFIGURESCRIPT\"\n    sh \"$CONFIGURESCRIPT\"\n    rm \"$CONFIGURESCRIPT\"\n\n    make -j $LOGICALCPU_MAX &> \"${CURRENT_DIR}/gmplib-${PLATFORM}-${ARCH}-build.log\"\n    make install &> \"${CURRENT_DIR}/gmplib-${PLATFORM}-${ARCH}-install.log\"\n\n    cp -r gmplib-${PLATFORM}-${ARCH}/include .\n    \n    rm -rf lib\n    mkdir lib\n\n    cp gmplib-${PLATFORM}-${ARCH}/lib/libgmp.a lib/libgmp.a\n\n    popd # gmp\n}\n\nbuild_relic_arch()\n{\n    pushd contrib/relic\n\n    PLATFORM=$1\n    ARCH=$2\n\n    SDK=`xcrun --sdk $PLATFORM --show-sdk-path`\n\n    BUILDDIR=\"relic-${PLATFORM}-${ARCH}\"\n    rm -rf $BUILDDIR\n    mkdir $BUILDDIR\n    pushd $BUILDDIR\n\n    unset CC\n    export CC=`xcrun --sdk ${PLATFORM} --find clang`\n\n    WSIZE=0\n    IOS_PLATFORM=\"\"\n    OPTIMIZATIONFLAGS=\"\"\n    DEPLOYMENT_TARGET=\"\"\n\n    if [[ $PLATFORM = $IPHONEOS ]]; then\n        if [[ $ARCH = \"arm64\" ]] || [[ $ARCH = \"arm64e\" ]]; then\n            IOS_PLATFORM=OS64\n            DEPLOYMENT_TARGET=$MIN_IOS\n            WSIZE=64\n            OPTIMIZATIONFLAGS=-fomit-frame-pointer\n        else\n            IOS_PLATFORM=OS\n            WSIZE=32\n        fi\n    elif [[ $PLATFORM = $IPHONESIMULATOR ]]; then\n        if [[ $ARCH = \"x86_64\" ]]; then\n            IOS_PLATFORM=SIMULATOR64\n            DEPLOYMENT_TARGET=$MIN_IOS\n            WSIZE=64\n            OPTIMIZATIONFLAGS=-fomit-frame-pointer\n        elif [[ $ARCH = \"arm64\" ]]; then\n            IOS_PLATFORM=SIMULATORARM64\n            DEPLOYMENT_TARGET=$MIN_IOS\n            WSIZE=64\n        else\n            IOS_PLATFORM=SIMULATOR\n            WSIZE=32\n        fi\n    elif [[ $PLATFORM = $WATCHOS ]]; then\n        IOS_PLATFORM=WATCHOS\n        DEPLOYMENT_TARGET=$MIN_WATCHOS\n        WSIZE=32\n    elif [[ $PLATFORM = $WATCHSIMULATOR ]]; then\n        IOS_PLATFORM=SIMULATOR_WATCHOS\n        DEPLOYMENT_TARGET=$MIN_WATCHOS\n        WSIZE=32\n    elif [[ $PLATFORM = $TVOS ]]; then\n        IOS_PLATFORM=TVOS\n        DEPLOYMENT_TARGET=$MIN_TVOS\n        WSIZE=64\n        OPTIMIZATIONFLAGS=-fomit-frame-pointer\n    elif [[ $PLATFORM = $TVSIMULATOR ]]; then\n        IOS_PLATFORM=SIMULATOR_TVOS\n        #TODO\n        if [[ $ARCH = \"arm64\" ]]\n        then\n            IOS_PLATFORM=OS64\n        fi\n        DEPLOYMENT_TARGET=$MIN_TVOS\n        WSIZE=64\n        OPTIMIZATIONFLAGS=-fomit-frame-pointer\n    elif [[ $PLATFORM = $MACOS ]]; then\n        WSIZE=64\n        IOS_PLATFORM=MAC\n        if [[ $ARCH = \"arm64\" ]]\n        then\n            IOS_PLATFORM=MAC_ARM64\n        fi\n        DEPLOYMENT_TARGET=$MIN_MACOS\n        OPTIMIZATIONFLAGS=-fomit-frame-pointer\n    fi\n    \n    COMPILER_ARGS=\"\"\n    if [[ $ARCH != \"i386\" ]]; then\n        COMPILER_ARGS=$(version_min_flag $PLATFORM)\n    fi\n    \n    EXTRA_ARGS=\"-DOPSYS=NONE -DIOS_PLATFORM=$IOS_PLATFORM -DPLATFORM=$IOS_PLATFORM -DDEPLOYMENT_TARGET=$DEPLOYMENT_TARGET -DCMAKE_TOOLCHAIN_FILE=../ios.toolchain.cmake\"\n    \n    if [[ $ARCH = \"i386\" ]]; then\n        EXTRA_ARGS+=\" -DARCH=X86\"\n    elif [[ $ARCH = \"x86_64\" ]]; then\n        EXTRA_ARGS+=\" -DARCH=X64\"\n    else\n        EXTRA_ARGS+=\" -DARCH=ARM\"\n        if [[ $ARCH = \"armv7s\" ]]; then\n            EXTRA_ARGS+=\" -DIOS_ARCH=armv7s\"\n        elif [[ $ARCH = \"armv7k\" ]]; then\n            EXTRA_ARGS+=\" -DIOS_ARCH=armv7k\"\n        elif [[ $ARCH = \"arm64_32\" ]]; then\n            EXTRA_ARGS+=\" -DIOS_ARCH=arm64_32\"\n        fi\n    fi\n\n    CURRENT_DIR=`pwd`\n\n    cmake -DCMAKE_PREFIX_PATH:PATH=\"${GMP_DIR}\" -DTESTS=0 -DBENCH=0 -DCHECK=off -DARITH=gmp -DFP_PRIME=381 -DMULTI=PTHREAD     -DFP_QNRES=off -DFP_METHD=\"INTEG;INTEG;INTEG;MONTY;LOWER;SLIDE\" -DFPX_METHD=\"INTEG;INTEG;LAZYR\" -DPP_METHD=\"LAZYR;OATEP\"     -DCOMP=\"-O3 -funroll-loops $OPTIMIZATIONFLAGS -isysroot $SDK -arch $ARCH -fembed-bitcode ${COMPILER_ARGS}\" -DWSIZE=$WSIZE     -DVERBS=off -DSHLIB=off -DALLOC=\"AUTO\" -DEP_PLAIN=off -DEP_SUPER=off -DPP_EXT=\"LAZYR\" -DTIMER=\"HREAL\" ${EXTRA_ARGS} ../\n\n    make -j $LOGICALCPU_MAX\n\n    popd # \"$BUILDDIR\"\n    popd # contrib/relic\n}\n\nbuild_bls_arch()\n{\n    BLS_FILES=( \"aggregationinfo\" \"bls\" \"chaincode\" \"extendedprivatekey\" \"extendedpublickey\" \"privatekey\" \"publickey\" \"signature\" )\n    ALL_BLS_OBJ_FILES=$(printf \"%s.o \" \"${BLS_FILES[@]}\")\n\n    PLATFORM=$1\n    ARCH=$2\n\n    SDK=`xcrun --sdk $PLATFORM --show-sdk-path`\n\n    BUILDDIR=\"bls-${PLATFORM}-${ARCH}\"\n    rm -rf $BUILDDIR\n    mkdir $BUILDDIR\n    pushd $BUILDDIR\n\n    EXTRA_ARGS=\"$(version_min_flag $PLATFORM)\"\n\n    CURRENT_DIR=`pwd`\n\n    for F in \"${BLS_FILES[@]}\"\n    do\n        clang -I\"../contrib/relic/include\" -I\"../contrib/relic/relic-${PLATFORM}-${ARCH}/include\" -I\"../src/\" -I\"${GMP_DIR}/include\"         -x c++ -std=c++14 -stdlib=libc++ -fembed-bitcode -arch \"${ARCH}\" -isysroot \"${SDK}\" ${EXTRA_ARGS} -c \"../src/${F}.cpp\" -o \"${CURRENT_DIR}/${F}.o\"\n    done\n\n    xcrun -sdk $PLATFORM ar -cvq libbls.a $ALL_BLS_OBJ_FILES\n\n    popd # \"$BUILDDIR\"\n}\n\nbuild_all_arch()\n{\n    PLATFORM=$1\n    ARCH=$2\n\n    build_gmp_arch $PLATFORM $ARCH\n    build_relic_arch $PLATFORM $ARCH\n    build_bls_arch $PLATFORM $ARCH\n}\n\nbuild_all()\n{\n    SUFFIX=$1\n    BUILD_IN=$2\n\n    IFS='|' read -ra BUILD_PAIRS <<< \"$BUILD_IN\"\n    for BUILD_PAIR in \"${BUILD_PAIRS[@]}\"\n    do\n        IFS=';' read -ra PARSED_PAIR <<< \"$BUILD_PAIR\"\n        PLATFORM=${PARSED_PAIR[0]}\n        ARCH=${PARSED_PAIR[1]}\n        \n        GMP_LIPOARGS=\"\"\n        RELIC_LIPOARGS=\"\"\n        BLS_LIPOARGS=\"\"\n\n        local NEED_LIPO=0\n        IFS='+' read -ra ARCHS <<< \"$ARCH\"\n        for i in \"${!ARCHS[@]}\"\n        do\n            local SINGLEARCH=${ARCHS[i]}\n            \n            # build for every platform+arch\n            build_all_arch $PLATFORM $SINGLEARCH\n            \n            rm -rf \"artefacts/${PLATFORM}-${SINGLEARCH}\"\n            mkdir \"artefacts/${PLATFORM}-${SINGLEARCH}\"\n\n            mv gmp/lib/libgmp.a \"artefacts/${PLATFORM}-${SINGLEARCH}/libgmp.a\"\n            mv \"contrib/relic/relic-${PLATFORM}-${SINGLEARCH}/lib/librelic_s.a\" \"artefacts/${PLATFORM}-${SINGLEARCH}/librelic.a\"\n            mv \"bls-${PLATFORM}-${SINGLEARCH}/libbls.a\" \"artefacts/${PLATFORM}-${SINGLEARCH}/libbls.a\"    \n\n            GMP_LIPOARGS+=\"artefacts/${PLATFORM}-${SINGLEARCH}/libgmp.a \"\n            RELIC_LIPOARGS+=\"artefacts/${PLATFORM}-${SINGLEARCH}/librelic.a \"\n            BLS_LIPOARGS+=\"artefacts/${PLATFORM}-${SINGLEARCH}/libbls.a \"\n\n            NEED_LIPO=i\n        done\n\n        # Do lipo if we need https://developer.apple.com/forums/thread/666335?answerId=645963022#645963022\n        if [[ $NEED_LIPO -gt 0 ]]\n        then\n            rm -rf \"artefacts/${PLATFORM}-fat\"\n            mkdir \"artefacts/${PLATFORM}-fat\"\n\n            # lipo gmp\n            xcrun lipo $GMP_LIPOARGS -create -output \"artefacts/${PLATFORM}-fat/libgmp.a\"\n\n            # lipo relic\n            xcrun lipo $RELIC_LIPOARGS -create -output \"artefacts/${PLATFORM}-fat/librelic.a\"\n            \n            # lipo bls\n            xcrun lipo $BLS_LIPOARGS -create -output \"artefacts/${PLATFORM}-fat/libbls.a\" \n\n            # clean up\n            for i in \"${!ARCHS[@]}\"\n            do\n                local SINGLEARCH=${ARCHS[i]}\n\n                rm -rf \"artefacts/${PLATFORM}-${SINGLEARCH}\"\n            done\n        fi\n    done\n}\n\nfunction make_relic_headers_universal()\n{\n    RELIC_TARGET_DIR=relic-iphoneos-arm64\n\n    perl -p -e 's/#define WSIZE.*/#ifdef __LP64__\n#define WSIZE 64\n#else\n#define WSIZE 32\n#endif/'     \"contrib/relic/${RELIC_TARGET_DIR}/include/relic_conf.h\"     > \"contrib/relic/${RELIC_TARGET_DIR}/include/relic_conf.h.new\"\n\n    rm \"contrib/relic/${RELIC_TARGET_DIR}/include/relic_conf.h\"\n    mv \"contrib/relic/${RELIC_TARGET_DIR}/include/relic_conf.h.new\" \"contrib/relic/${RELIC_TARGET_DIR}/include/relic_conf.h\"   \n}\n\nfunction copy_headers()\n{\n    mkdir artefacts/include\n\n    # Copy all headers we will need\n    cp -rf src/*.hpp artefacts/include\n    cp -rf gmp/include/gmp.h artefacts/include\n    cp -rf contrib/relic/include/*.h artefacts/include\n    cp -rf contrib/relic/include/low/*.h artefacts/include\n    cp -rf contrib/relic/relic-iphoneos-arm64/include/*.h artefacts/include\n    rm -rf artefacts/include/test-utils.hpp\n}\n\nfunction make_xcframework()\n{\n    pushd artefacts\n\n    XCFRAMEWORK_ARGS=\"\"\n\n    for dir in */; do\n        if [ -d \"$dir\" ]; then\n            if [[ \"$dir\" != \"include/\" ]]; then\n                libtool -static -o \"${dir}libbls_combined.a\" \"${dir}libgmp.a\" \"${dir}librelic.a\" \"${dir}libbls.a\"\n    \n                XCFRAMEWORK_ARGS+=\"-library ${dir}libbls_combined.a -headers include \"\n            fi\n        fi\n    done\n\n    xcodebuild -create-xcframework $XCFRAMEWORK_ARGS -output \"libbls.xcframework\"\n}\n\nprepare\n\nbuild_all \"macos\" \"${MACOS};x86_64+arm64\"\nbuild_all \"ios\" \"${IPHONEOS};arm64|${IPHONESIMULATOR};arm64+x86_64\"\nmake_relic_headers_universal\ncopy_headers\nmake_xcframework",
  "platforms": {
    "ios": "13.0",
    "osx": "10.15"
  },
  "libraries": "c++",
  "pod_target_xcconfig": {
    "CLANG_CXX_LANGUAGE_STANDARD": "c++14",
    "CLANG_WARN_DOCUMENTATION_COMMENTS": "NO",
    "GCC_WARN_64_TO_32_BIT_CONVERSION": "NO",
    "GCC_WARN_INHIBIT_ALL_WARNINGS": "YES"
  },
  "vendored_frameworks": "artefacts/libbls.xcframework"
}
